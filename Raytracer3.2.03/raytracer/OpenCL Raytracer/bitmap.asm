; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG5009	DB	'wb', 00H
	ORG $+5
$SG5011	DB	'Error opening file %s for writing', 0dH, 0aH, 00H
CONST	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z	; write_bmp_file
EXTRN	__GSHandlerCheck:PROC
EXTRN	fclose:PROC
EXTRN	fputc:PROC
EXTRN	fwrite:PROC
EXTRN	printf:PROC
EXTRN	fopen:PROC
EXTRN	__security_cookie:QWORD
EXTRN	__security_check_cookie:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_RTC_InitBase:PROC
pdata	SEGMENT
$pdata$?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z DD imagerel $LN15
	DD	imagerel $LN15+884
	DD	imagerel $unwind$?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z DD 034419H
	DD	01e011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0e0H
xdata	ENDS
CONST	SEGMENT
	ORG $+4
?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z$rtcName$0 DB 06dH ; write_bmp_file
	DB	061H
	DB	067H
	DB	069H
	DB	063H
	DB	05fH
	DB	062H
	DB	079H
	DB	074H
	DB	065H
	DB	073H
	DB	00H
	ORG $+4
?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z$rtcName$1 DB 062H ; write_bmp_file
	DB	069H
	DB	074H
	DB	06dH
	DB	061H
	DB	070H
	DB	05fH
	DB	068H
	DB	065H
	DB	061H
	DB	064H
	DB	065H
	DB	072H
	DB	00H
	ORG $+2
?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z$rtcName$2 DB 062H ; write_bmp_file
	DB	069H
	DB	074H
	DB	06dH
	DB	061H
	DB	070H
	DB	05fH
	DB	069H
	DB	06eH
	DB	066H
	DB	06fH
	DB	05fH
	DB	068H
	DB	065H
	DB	061H
	DB	064H
	DB	065H
	DB	072H
	DB	00H
	ORG $+13
?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z$rtcVarDesc DD 088H ; write_bmp_file
	DD	028H
	DQ	FLAT:?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z$rtcName$2
	DD	058H
	DD	0cH
	DQ	FLAT:?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z$rtcName$1
	DD	034H
	DD	02H
	DQ	FLAT:?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z$rtcName$0
	ORG $+144
?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z$rtcFrameData DD 03H ; write_bmp_file
	DD	00H
	DQ	FLAT:?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT rtc$TMZ
; File c:\users\mark\documents\devmaster_raytracing\raytracer3.2.02\raytracer\opencl raytracer\bitmap.c
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
row_size$ = 32
row_size_padding$ = 36
pixel_array_size$ = 40
file_size$ = 44
magic_bytes$ = 52
bitmap_header$ = 88
bitmap_info_header$ = 136
bitmap_file$ = 184
i$5012 = 192
j$5016 = 196
cur_pixel$5020 = 200
r$5021 = 204
tv69 = 216
__$ArrayPad$ = 224
pixels$ = 256
width$ = 264
height$ = 272
filename$ = 280
?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z PROC	; write_bmp_file
; Line 9
$LN15:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 240				; 000000f0H
	mov	rdi, rsp
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+256]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 11
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, 3
	mov	DWORD PTR row_size$[rsp], eax
; Line 12
	mov	eax, DWORD PTR row_size$[rsp]
	cdq
	and	edx, 3
	add	eax, edx
	and	eax, 3
	sub	eax, edx
	test	eax, eax
	jne	SHORT $LN13@write_bmp_
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN14@write_bmp_
$LN13@write_bmp_:
	mov	eax, DWORD PTR row_size$[rsp]
	cdq
	and	edx, 3
	add	eax, edx
	and	eax, 3
	sub	eax, edx
	mov	ecx, 4
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv69[rsp], eax
$LN14@write_bmp_:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR row_size_padding$[rsp], eax
; Line 13
	mov	eax, DWORD PTR row_size_padding$[rsp]
	mov	ecx, DWORD PTR row_size$[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, DWORD PTR height$[rsp]
	mov	DWORD PTR pixel_array_size$[rsp], eax
; Line 14
	mov	eax, DWORD PTR pixel_array_size$[rsp]
	add	eax, 54					; 00000036H
	mov	DWORD PTR file_size$[rsp], eax
; Line 18
	mov	BYTE PTR magic_bytes$[rsp], 66		; 00000042H
; Line 19
	mov	BYTE PTR magic_bytes$[rsp+1], 77	; 0000004dH
; Line 22
	mov	eax, DWORD PTR file_size$[rsp]
	mov	DWORD PTR bitmap_header$[rsp], eax
; Line 23
	xor	eax, eax
	mov	WORD PTR bitmap_header$[rsp+4], ax
; Line 24
	xor	eax, eax
	mov	WORD PTR bitmap_header$[rsp+6], ax
; Line 25
	mov	DWORD PTR bitmap_header$[rsp+8], 54	; 00000036H
; Line 28
	mov	DWORD PTR bitmap_info_header$[rsp], 40	; 00000028H
; Line 29
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR bitmap_info_header$[rsp+4], eax
; Line 30
	mov	eax, DWORD PTR height$[rsp]
	mov	DWORD PTR bitmap_info_header$[rsp+8], eax
; Line 31
	mov	eax, 1
	mov	WORD PTR bitmap_info_header$[rsp+12], ax
; Line 32
	mov	eax, 24
	mov	WORD PTR bitmap_info_header$[rsp+14], ax
; Line 33
	mov	DWORD PTR bitmap_info_header$[rsp+16], 0
; Line 34
	mov	eax, DWORD PTR pixel_array_size$[rsp]
	mov	DWORD PTR bitmap_info_header$[rsp+20], eax
; Line 35
	mov	DWORD PTR bitmap_info_header$[rsp+24], 2835 ; 00000b13H
; Line 36
	mov	DWORD PTR bitmap_info_header$[rsp+28], 2835 ; 00000b13H
; Line 37
	mov	DWORD PTR bitmap_info_header$[rsp+32], 0
; Line 38
	mov	DWORD PTR bitmap_info_header$[rsp+36], 0
; Line 42
	lea	rdx, OFFSET FLAT:$SG5009
	mov	rcx, QWORD PTR filename$[rsp]
	call	fopen
	mov	QWORD PTR bitmap_file$[rsp], rax
; Line 43
	cmp	QWORD PTR bitmap_file$[rsp], 0
	jne	SHORT $LN10@write_bmp_
; Line 45
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, OFFSET FLAT:$SG5011
	call	printf
; Line 46
	xor	eax, eax
	jmp	$LN11@write_bmp_
$LN10@write_bmp_:
; Line 49
	mov	r9, QWORD PTR bitmap_file$[rsp]
	mov	r8d, 1
	mov	edx, 2
	lea	rcx, QWORD PTR magic_bytes$[rsp]
	call	fwrite
; Line 50
	mov	r9, QWORD PTR bitmap_file$[rsp]
	mov	r8d, 1
	mov	edx, 12
	lea	rcx, QWORD PTR bitmap_header$[rsp]
	call	fwrite
; Line 51
	mov	r9, QWORD PTR bitmap_file$[rsp]
	mov	r8d, 1
	mov	edx, 40					; 00000028H
	lea	rcx, QWORD PTR bitmap_info_header$[rsp]
	call	fwrite
; Line 58
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	mov	DWORD PTR i$5012[rsp], eax
	jmp	SHORT $LN9@write_bmp_
$LN8@write_bmp_:
	mov	eax, DWORD PTR i$5012[rsp]
	dec	eax
	mov	DWORD PTR i$5012[rsp], eax
$LN9@write_bmp_:
	cmp	DWORD PTR i$5012[rsp], -1
	jle	$LN7@write_bmp_
; Line 60
	mov	DWORD PTR j$5016[rsp], 0
	jmp	SHORT $LN6@write_bmp_
$LN5@write_bmp_:
	mov	eax, DWORD PTR j$5016[rsp]
	inc	eax
	mov	DWORD PTR j$5016[rsp], eax
$LN6@write_bmp_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR j$5016[rsp], eax
	jge	$LN4@write_bmp_
; Line 62
	mov	eax, DWORD PTR i$5012[rsp]
	imul	eax, DWORD PTR width$[rsp]
	add	eax, DWORD PTR j$5016[rsp]
	mov	DWORD PTR cur_pixel$5020[rsp], eax
; Line 65
	movsxd	rax, DWORD PTR cur_pixel$5020[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax*4+2]
	mov	rdx, QWORD PTR bitmap_file$[rsp]
	mov	ecx, eax
	call	fputc
; Line 66
	movsxd	rax, DWORD PTR cur_pixel$5020[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax*4+1]
	mov	rdx, QWORD PTR bitmap_file$[rsp]
	mov	ecx, eax
	call	fputc
; Line 67
	movsxd	rax, DWORD PTR cur_pixel$5020[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax*4]
	mov	rdx, QWORD PTR bitmap_file$[rsp]
	mov	ecx, eax
	call	fputc
; Line 68
	jmp	$LN5@write_bmp_
$LN4@write_bmp_:
; Line 69
	mov	DWORD PTR r$5021[rsp], 0
	jmp	SHORT $LN3@write_bmp_
$LN2@write_bmp_:
	mov	eax, DWORD PTR r$5021[rsp]
	inc	eax
	mov	DWORD PTR r$5021[rsp], eax
$LN3@write_bmp_:
	mov	eax, DWORD PTR row_size_padding$[rsp]
	cmp	DWORD PTR r$5021[rsp], eax
	jge	SHORT $LN1@write_bmp_
; Line 70
	mov	rdx, QWORD PTR bitmap_file$[rsp]
	xor	ecx, ecx
	call	fputc
	jmp	SHORT $LN2@write_bmp_
$LN1@write_bmp_:
; Line 71
	jmp	$LN8@write_bmp_
$LN7@write_bmp_:
; Line 73
	mov	rcx, QWORD PTR bitmap_file$[rsp]
	call	fclose
; Line 74
	mov	eax, 1
$LN11@write_bmp_:
; Line 75
	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 240				; 000000f0H
	pop	rdi
	ret	0
?write_bmp_file@@YAHPEATcl_uchar4@@HHPEAD@Z ENDP	; write_bmp_file
_TEXT	ENDS
END
